{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react'; // import delay from 'delay'\n// import Observer from 'react-intersection-observer'\n// import {mergeClassNames,} from 'bia-template-helpers'\n// import {map, clamp,} from 'bia-math'\n// import {ratioPercentage, getResponsiveImage, supportsMixBlendMode,} from '_utils'\n\nvar Image =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Image, _React$PureComponent);\n\n  function Image() {\n    _classCallCheck(this, Image);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Image).apply(this, arguments));\n  }\n\n  _createClass(Image, [{\n    key: \"render\",\n    // state = {\n    //     src: this.props.src,\n    //     inView: false,\n    // }\n    // async componentDidMount() {\n    //     if (this.state.src) return\n    //     await delay(250)\n    //     if (!this.container) return\n    //     const bounds = this.container.getBoundingClientRect()\n    //     this.setState({\n    //         bounds,\n    //         top: bounds.top + window.pageYOffset,\n    //         bottom: bounds.bottom + window.pageYOffset,\n    //         actualHeight: bounds.height * this.initScale,\n    //         hasBlend: supportsMixBlendMode(),\n    //     })\n    //     this.props.rafScroll && this.props.rafScroll.add(this.rafLoop)\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (!this.props.image || prevProps.image.url === this.props.image.url)\n    //         return\n    //     const newSrc = getResponsiveImage(this.props.image, this.state.bounds)\n    //     if (prevState.src && (!this.state.src || newSrc === this.state.src))\n    //         return\n    //     return this.setState({\n    //         src: newSrc,\n    //     })\n    // }\n    // componentWillUnmount() {\n    //     this.props.rafScroll && this.props.rafScroll.remove(this.rafLoop)\n    // }\n    // /**\n    //  * Event Handlers\n    //  */\n    // toggleInView = inView => {\n    //     if (this.state.src || inView == false || !this.props.image) return\n    //     const imageSrc = getResponsiveImage(this.props.image, this.state.bounds)\n    //     this.setState({\n    //         src: imageSrc,\n    //         inView: true,\n    //     })\n    //     if (this.props.callback) {\n    //         const image = document.createElement(`img`)\n    //         image.src = imageSrc\n    //         image.onload = e => {\n    //             this.props.callback()\n    //         }\n    //     }\n    // }\n\n    /**\n     * Renders\n     */\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", null);\n      var image = this.props.image;\n\n      var _ref = image ? image : {},\n          _ref$url = _ref.url,\n          url = _ref$url === void 0 ? \"\" : _ref$url,\n          _ref$alt = _ref.alt,\n          alt = _ref$alt === void 0 ? \"\" : _ref$alt; // thisthis.props.callback()\n\n\n      return React.createElement(Observer, {\n        className: mergeClassNames(s.container, this.props.className, this.props.animateInView ? s.animateInView : false, this.state.inView //  && this.props.animateInView\n        ? s.inView : false),\n        onChange: this.toggleInView,\n        threshold: 0,\n        rootMargin: \"0% 0% 25%\",\n        triggerOnce: true,\n        style: this.getContainerStyle()\n      }, typeof document === \"undefined\" && React.createElement(\"noscript\", null, React.createElement(\"img\", {\n        src: url,\n        alt: alt\n      })), this.props.hasBlendMode && this.state.hasBlend ? React.createElement(\"div\", {\n        className: mergeClassNames(s.blendMode, this.props.noBlendHoverState ? s.noHoverState : false, this.props.isActive ? s.active : false, this.props.blendClassName ? this.props.blendClassName : false)\n      }) : false, React.createElement(\"div\", {\n        className: s.imageMask\n      }, React.createElement(\"div\", _extends({\n        className: mergeClassNames(!this.state.src ? s.src : s.loadedSrc, this.props.hasBlendMode && !this.props.isActive ? s.grayScale : false, this.props.parallax ? s.hasParallax : false),\n        ref: function ref(el) {\n          return _this.container = el;\n        } // onLoad={() => this.props.callback()}\n        ,\n        style: _objectSpread({}, this.props.style, {\n          backgroundImage: this.state.src ? \"url(\".concat(this.state.src, \")\") : \"\"\n        })\n      }, this.props.events))), this.props.children ? this.props.children : false);\n    } // /**\n    //  * Helpers\n    //  */\n    // getContainerStyle = () => {\n    //     const {image, ratio = false, byPassRatio = false,} = this.props\n    //     if (!image || byPassRatio) return {}\n    //     const {width, height,} = image\n    //     const padding = ratio ? ratio : ratioPercentage({width, height,})\n    //     return {\n    //         paddingBottom: `${padding}%`,\n    //     }\n    // }\n    // rafLoop = args => {\n    //     const scrollY = args.scrollY + window.innerHeight\n    //     if (\n    //         !this.state.src ||\n    //         scrollY < this.state.top ||\n    //         args.scrollY >= this.state.bottom\n    //     )\n    //         return\n    //     const transformValue = clamp(\n    //         0,\n    //         10,\n    //         map(\n    //             [0, this.state.actualHeight + window.innerHeight,],\n    //             [0, 10,],\n    //             scrollY - this.state.top\n    //         )\n    //     )\n    //     if (transformValue > 10) return\n    //     this.transform += (transformValue - this.curTransform) * 0.1\n    //     this.curTransform = this.transform\n    //     this.container.style.transform = `translate3d(0, -${\n    //         this.transform\n    //     }%, 0)`\n    // }\n\n  }]);\n\n  return Image;\n}(React.PureComponent);\n\nexport default Image;","map":null,"metadata":{},"sourceType":"module"}