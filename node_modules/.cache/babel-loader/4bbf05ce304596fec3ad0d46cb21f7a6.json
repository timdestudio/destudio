{"ast":null,"code":"import _Object$is from \"@babel/runtime-corejs2/core-js/object/is\";\nimport _WeakMap from \"@babel/runtime-corejs2/core-js/weak-map\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/** Creates a rafLoop to handle scroll animations */\nexport var RafLoop =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create the RafLoop\n   * @param  {} el - Element to check the Yoffset\n   */\n  function RafLoop() {\n    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n\n    _classCallCheck(this, RafLoop);\n\n    this.scroll = typeof el.pageYOffset === 'number' ? el.pageYOffset : el.scrollTop;\n    this.lastScroll = 0;\n    this.deltaY = 0;\n    this.el = el;\n    this.momentumY = 0;\n    this.t = _Date$now();\n    this.startTime = this.t;\n    this.functionMap = new _WeakMap();\n    this.functionsToRun = [];\n    this.isPaused = false;\n    this.ticking = false;\n    this.isRunning = false;\n    this.setup(el);\n  }\n  /**\n   * Set the eventlisteners\n   * @param  {} el - Element to check the Yoffset\n   */\n\n\n  _createClass(RafLoop, [{\n    key: \"setup\",\n    value: function setup(el) {\n      var _this = this;\n\n      this.update = this.update.bind(this); // Update value onscroll\n\n      el.addEventListener('scroll', function (e) {\n        if (e.currentTarget !== el) return;\n        _this.scroll = typeof e.target.scrollTop === 'number' ? e.target.scrollTop : window.pageYOffset;\n      }, true);\n    } // --- Events ---\n\n    /**\n     * Remove a function from the loop\n     * @param  {function} fn\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(fn) {\n      var func = this.functionMap.get(fn);\n      this.functionsToRun = this.functionsToRun.filter(function (fn) {\n        return !_Object$is(fn, func);\n      });\n      this.functionMap.delete(fn);\n    }\n    /**\n     * Add a function to the loop\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(fn) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      var func = function func(e) {\n        return fn.apply(void 0, [e].concat(params));\n      };\n\n      this.functionMap.set(fn, func);\n      this.functionsToRun.push(func);\n      if (!this.isRunning) this.start();\n    }\n    /**\n     * Add a function to the loop to be run once\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n\n  }, {\n    key: \"addOnce\",\n    value: function addOnce(fn) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      var func = function func(e) {\n        fn.apply(void 0, [e].concat(params));\n\n        _this2.remove(fn);\n      };\n\n      this.functionMap.set(fn, func);\n      this.functionsToRun.push(func);\n      if (!this.isRunning) this.start();\n    } // --- Toggle the loop ---\n\n    /**\n     * Start the loop\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.isRunning = true;\n      window.requestAnimationFrame(this.update);\n    }\n    /**\n     * Pause the loop\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.isPaused = true;\n    }\n    /**\n     * Resume the loop\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.isPaused = false;\n      this.t = _Date$now();\n      this.startTime = this.t;\n    }\n    /**\n     * Destroy the rafLoop\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.lastScroll = 0;\n      this.deltaY = 0;\n      this.momentumY = 0;\n      this.functionsToRun = [];\n    } //  --- Helpers ---\n\n    /**\n     * Set all loop values to 0\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.lastScroll = 0;\n      this.deltaY = 0;\n      this.momentumY = 0;\n    }\n    /**\n     * Hard scroll to\n     */\n\n  }, {\n    key: \"snapTo\",\n    value: function snapTo() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.el.scrollTo(x, y);\n      this.momentumY = y;\n    }\n    /**\n     * Get the current arguments for the loop\n     * @returns {object} args\n     */\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent() {\n      if (this.ticking) this.deltaY = this.scroll - this.lastScroll;\n\n      var now = _Date$now();\n\n      var deltaTime = now - this.t;\n      var time = now - this.startTime;\n      this.lastScroll = this.scroll;\n      this.momentumY += (this.lastScroll - this.momentumY) * 0.15;\n      this.t = now;\n      return {\n        scrollY: this.lastScroll,\n        deltaY: this.deltaY,\n        momentumY: this.momentumY,\n        deltaTime: deltaTime,\n        time: time\n      };\n    } // --- Loop ---\n\n    /**\n     * Default loop function\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.ticking = true;\n\n      if (!this.isPaused) {\n        var args = this.getEvent();\n\n        for (var i = 0; i < this.functionsToRun.length; i++) {\n          this.functionsToRun[i](args);\n        }\n      }\n\n      this.ticking = false;\n      if (this.functionsToRun.length === 0) this.isRunning = false;\n      if (this.isRunning) window.requestAnimationFrame(this.update);\n    }\n  }]);\n\n  return RafLoop;\n}();","map":{"version":3,"sources":["/Users/dion/Sites/destudio/utils/rafLoop.js"],"names":["RafLoop","el","window","scroll","pageYOffset","scrollTop","lastScroll","deltaY","momentumY","t","startTime","functionMap","functionsToRun","isPaused","ticking","isRunning","setup","update","bind","addEventListener","e","currentTarget","target","fn","func","get","filter","delete","params","set","push","start","remove","requestAnimationFrame","x","y","scrollTo","now","deltaTime","time","scrollY","args","getEvent","i","length"],"mappings":"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","sourcesContent":["/** Creates a rafLoop to handle scroll animations */\nexport class RafLoop {\n    /**\n     * Create the RafLoop\n     * @param  {} el - Element to check the Yoffset\n     */\n    constructor(el = window) {\n        this.scroll =\n            typeof el.pageYOffset === 'number' ? el.pageYOffset : el.scrollTop\n        this.lastScroll = 0\n        this.deltaY = 0\n\n        this.el = el\n        this.momentumY = 0\n        this.t = Date.now()\n        this.startTime = this.t\n\n        this.functionMap = new WeakMap()\n        this.functionsToRun = []\n\n        this.isPaused = false\n        this.ticking = false\n        this.isRunning = false\n\n        this.setup(el)\n    }\n\n    /**\n     * Set the eventlisteners\n     * @param  {} el - Element to check the Yoffset\n     */\n    setup(el) {\n        this.update = this.update.bind(this)\n\n        // Update value onscroll\n        el.addEventListener( 'scroll', e => {\n            if( e.currentTarget !== el ) return\n            this.scroll =\n                    typeof e.target.scrollTop === 'number'\n                        ? e.target.scrollTop\n                        : window.pageYOffset\n        }, true )\n    }\n\n    // --- Events ---\n\n    /**\n     * Remove a function from the loop\n     * @param  {function} fn\n     */\n    remove(fn) {\n        const func = this.functionMap.get(fn)\n        this.functionsToRun = this.functionsToRun.filter(\n            fn => !Object.is(fn, func)\n        )\n        this.functionMap.delete(fn)\n    }\n\n    /**\n     * Add a function to the loop\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n    add(fn, ...params) {\n        const func = e => fn(e, ...params)\n        this.functionMap.set(fn, func)\n        this.functionsToRun.push(func)\n\n        if (!this.isRunning) this.start()\n    }\n\n    /**\n     * Add a function to the loop to be run once\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n    addOnce(fn, ...params) {\n        const func = e => {\n            fn(e, ...params)\n            this.remove(fn)\n        }\n        this.functionMap.set(fn, func)\n        this.functionsToRun.push(func)\n\n        if (!this.isRunning) this.start()\n    }\n\n    // --- Toggle the loop ---\n\n    /**\n     * Start the loop\n     */\n    start() {\n        this.isRunning = true\n        window.requestAnimationFrame(this.update)\n    }\n\n    /**\n     * Pause the loop\n     */\n    pause() {\n        this.isPaused = true\n    }\n\n    /**\n     * Resume the loop\n     */\n    resume() {\n        this.isPaused = false\n        this.t = Date.now()\n        this.startTime = this.t\n    }\n\n    /**\n     * Destroy the rafLoop\n     */\n    destroy() {\n        this.lastScroll = 0\n        this.deltaY = 0\n        this.momentumY = 0\n        this.functionsToRun = []\n    }\n\n    //  --- Helpers ---\n\n    /**\n     * Set all loop values to 0\n     */\n    reset() {\n        this.lastScroll = 0\n        this.deltaY = 0\n        this.momentumY = 0\n    }\n\n    /**\n     * Hard scroll to\n     */\n    snapTo(x = 0, y = 0) {\n        this.el.scrollTo(x, y)\n        this.momentumY = y\n    }\n\n    /**\n     * Get the current arguments for the loop\n     * @returns {object} args\n     */\n    getEvent() {\n        if (this.ticking) this.deltaY = this.scroll - this.lastScroll\n        const now = Date.now()\n        const deltaTime = now - this.t\n        const time = now - this.startTime\n\n        this.lastScroll = this.scroll\n        this.momentumY += (this.lastScroll - this.momentumY) * 0.15\n        this.t = now\n\n        return {\n            scrollY: this.lastScroll,\n            deltaY: this.deltaY,\n            momentumY: this.momentumY,\n            deltaTime,\n            time\n        }\n    }\n\n    // --- Loop ---\n\n    /**\n     * Default loop function\n     */\n    update() {\n        this.ticking = true\n\n        if (!this.isPaused) {\n            const args = this.getEvent()\n            for (let i = 0; i < this.functionsToRun.length; i++) {\n                this.functionsToRun[i](args)\n            }\n        }\n        this.ticking = false\n\n        if (this.functionsToRun.length === 0) this.isRunning = false\n        if (this.isRunning) window.requestAnimationFrame(this.update)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}