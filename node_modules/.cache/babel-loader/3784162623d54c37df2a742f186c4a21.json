{"ast":null,"code":"import _Object$is from \"@babel/runtime-corejs2/core-js/object/is\";\nimport _WeakMap from \"@babel/runtime-corejs2/core-js/weak-map\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/** Creates a rafLoop to handle scroll animations */\nexport var RafLoop =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create the RafLoop\n   * @param  {} el - Element to check the Yoffset\n   */\n  function RafLoop() {\n    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n\n    _classCallCheck(this, RafLoop);\n\n    this.scroll = typeof el.pageYOffset === 'number' ? el.pageYOffset : el.scrollTop;\n    this.lastScroll = 0;\n    this.deltaY = 0;\n    this.el = el;\n    this.momentumY = 0;\n    this.t = _Date$now();\n    this.startTime = this.t;\n    this.functionMap = new _WeakMap();\n    this.functionsToRun = [];\n    this.isPaused = false;\n    this.ticking = false;\n    this.isRunning = false;\n    this.setup(el);\n  }\n  /**\n   * Set the eventlisteners\n   * @param  {} el - Element to check the Yoffset\n   */\n\n\n  _createClass(RafLoop, [{\n    key: \"setup\",\n    value: function setup(el) {\n      var _this = this;\n\n      this.update = this.update.bind(this); // Update value onscroll\n\n      el.addEventListener('scroll', function (e) {\n        if (e.currentTarget !== el) return;\n        _this.scroll = typeof e.target.scrollTop === 'number' ? e.target.scrollTop : window.pageYOffset;\n      }, true);\n    } // --- Events ---\n\n    /**\n     * Remove a function from the loop\n     * @param  {function} fn\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(fn) {\n      var func = this.functionMap.get(fn);\n      this.functionsToRun = this.functionsToRun.filter(function (fn) {\n        return !_Object$is(fn, func);\n      });\n      this.functionMap.delete(fn);\n    }\n    /**\n     * Add a function to the loop\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(fn) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      var func = function func(e) {\n        return fn.apply(void 0, [e].concat(params));\n      };\n\n      this.functionMap.set(fn, func);\n      this.functionsToRun.push(func);\n      if (!this.isRunning) this.start();\n    }\n    /**\n     * Add a function to the loop to be run once\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n\n  }, {\n    key: \"addOnce\",\n    value: function addOnce(fn) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      var func = function func(e) {\n        fn.apply(void 0, [e].concat(params));\n\n        _this2.remove(fn);\n      };\n\n      this.functionMap.set(fn, func);\n      this.functionsToRun.push(func);\n      if (!this.isRunning) this.start();\n    } // --- Toggle the loop ---\n\n    /**\n     * Start the loop\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.isRunning = true;\n      window.requestAnimationFrame(this.update);\n    }\n    /**\n     * Pause the loop\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.isPaused = true;\n    }\n    /**\n     * Resume the loop\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.isPaused = false;\n      this.t = _Date$now();\n      this.startTime = this.t;\n    }\n    /**\n     * Destroy the rafLoop\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.lastScroll = 0;\n      this.deltaY = 0;\n      this.momentumY = 0;\n      this.functionsToRun = [];\n    } //  --- Helpers ---\n\n    /**\n     * Set all loop values to 0\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.lastScroll = 0;\n      this.deltaY = 0;\n      this.momentumY = 0;\n    }\n    /**\n     * Hard scroll to\n     */\n\n  }, {\n    key: \"snapTo\",\n    value: function snapTo() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.el.scrollTo(x, y);\n      this.momentumY = y;\n    }\n    /**\n     * Get the current arguments for the loop\n     * @returns {object} args\n     */\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent() {\n      if (this.ticking) this.deltaY = this.scroll - this.lastScroll;\n\n      var now = _Date$now();\n\n      var deltaTime = now - this.t;\n      var time = now - this.startTime;\n      this.lastScroll = this.scroll;\n      this.momentumY += (this.lastScroll - this.momentumY) * 0.15;\n      this.t = now;\n      return {\n        scrollY: this.lastScroll,\n        deltaY: this.deltaY,\n        momentumY: this.momentumY,\n        deltaTime: deltaTime,\n        time: time\n      };\n    } // --- Loop ---\n\n    /**\n     * Default loop function\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.ticking = true;\n\n      if (!this.isPaused) {\n        var args = this.getEvent();\n\n        for (var i = 0; i < this.functionsToRun.length; i++) {\n          this.functionsToRun[i](args);\n        }\n      }\n\n      this.ticking = false;\n      if (this.functionsToRun.length === 0) this.isRunning = false;\n      if (this.isRunning) window.requestAnimationFrame(this.update);\n    }\n  }]);\n\n  return RafLoop;\n}();","map":null,"metadata":{},"sourceType":"module"}