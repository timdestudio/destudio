{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport delay from 'delay'; // import Observer from 'react-intersection-observer'\n\nimport { mergeClassNames } from 'bia-template-helpers'; // import {map, clamp,} from 'bia-math'\n// import {ratioPercentage, getResponsiveImage, supportsMixBlendMode,} from '_utils'\n\nvar Image =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Image, _React$PureComponent);\n\n  function Image() {\n    _classCallCheck(this, Image);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Image).apply(this, arguments));\n  }\n\n  _createClass(Image, [{\n    key: \"render\",\n    // state = {\n    //     src: this.props.src,\n    //     inView: false,\n    // }\n    // async componentDidMount() {\n    //     if (this.state.src) return\n    //     await delay(250)\n    //     if (!this.container) return\n    //     const bounds = this.container.getBoundingClientRect()\n    //     this.setState({\n    //         bounds,\n    //         top: bounds.top + window.pageYOffset,\n    //         bottom: bounds.bottom + window.pageYOffset,\n    //         actualHeight: bounds.height * this.initScale,\n    //         hasBlend: supportsMixBlendMode(),\n    //     })\n    //     this.props.rafScroll && this.props.rafScroll.add(this.rafLoop)\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (!this.props.image || prevProps.image.url === this.props.image.url)\n    //         return\n    //     const newSrc = getResponsiveImage(this.props.image, this.state.bounds)\n    //     if (prevState.src && (!this.state.src || newSrc === this.state.src))\n    //         return\n    //     return this.setState({\n    //         src: newSrc,\n    //     })\n    // }\n    // componentWillUnmount() {\n    //     this.props.rafScroll && this.props.rafScroll.remove(this.rafLoop)\n    // }\n    // /**\n    //  * Event Handlers\n    //  */\n    // toggleInView = inView => {\n    //     if (this.state.src || inView == false || !this.props.image) return\n    //     const imageSrc = getResponsiveImage(this.props.image, this.state.bounds)\n    //     this.setState({\n    //         src: imageSrc,\n    //         inView: true,\n    //     })\n    //     if (this.props.callback) {\n    //         const image = document.createElement(`img`)\n    //         image.src = imageSrc\n    //         image.onload = e => {\n    //             this.props.callback()\n    //         }\n    //     }\n    // }\n\n    /**\n     * Renders\n     */\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", null);\n      var image = this.props.image;\n\n      var _ref = image ? image : {},\n          _ref$url = _ref.url,\n          url = _ref$url === void 0 ? \"\" : _ref$url,\n          _ref$alt = _ref.alt,\n          alt = _ref$alt === void 0 ? \"\" : _ref$alt; // thisthis.props.callback()\n\n\n      return React.createElement(Observer, {\n        className: mergeClassNames(s.container, this.props.className, this.props.animateInView ? s.animateInView : false, this.state.inView //  && this.props.animateInView\n        ? s.inView : false),\n        onChange: this.toggleInView,\n        threshold: 0,\n        rootMargin: \"0% 0% 25%\",\n        triggerOnce: true,\n        style: this.getContainerStyle()\n      }, typeof document === \"undefined\" && React.createElement(\"noscript\", null, React.createElement(\"img\", {\n        src: url,\n        alt: alt\n      })), this.props.hasBlendMode && this.state.hasBlend ? React.createElement(\"div\", {\n        className: mergeClassNames(s.blendMode, this.props.noBlendHoverState ? s.noHoverState : false, this.props.isActive ? s.active : false, this.props.blendClassName ? this.props.blendClassName : false)\n      }) : false, React.createElement(\"div\", {\n        className: s.imageMask\n      }, React.createElement(\"div\", _extends({\n        className: mergeClassNames(!this.state.src ? s.src : s.loadedSrc, this.props.hasBlendMode && !this.props.isActive ? s.grayScale : false, this.props.parallax ? s.hasParallax : false),\n        ref: function ref(el) {\n          return _this.container = el;\n        } // onLoad={() => this.props.callback()}\n        ,\n        style: _objectSpread({}, this.props.style, {\n          backgroundImage: this.state.src ? \"url(\".concat(this.state.src, \")\") : \"\"\n        })\n      }, this.props.events))), this.props.children ? this.props.children : false);\n    } // /**\n    //  * Helpers\n    //  */\n    // getContainerStyle = () => {\n    //     const {image, ratio = false, byPassRatio = false,} = this.props\n    //     if (!image || byPassRatio) return {}\n    //     const {width, height,} = image\n    //     const padding = ratio ? ratio : ratioPercentage({width, height,})\n    //     return {\n    //         paddingBottom: `${padding}%`,\n    //     }\n    // }\n    // rafLoop = args => {\n    //     const scrollY = args.scrollY + window.innerHeight\n    //     if (\n    //         !this.state.src ||\n    //         scrollY < this.state.top ||\n    //         args.scrollY >= this.state.bottom\n    //     )\n    //         return\n    //     const transformValue = clamp(\n    //         0,\n    //         10,\n    //         map(\n    //             [0, this.state.actualHeight + window.innerHeight,],\n    //             [0, 10,],\n    //             scrollY - this.state.top\n    //         )\n    //     )\n    //     if (transformValue > 10) return\n    //     this.transform += (transformValue - this.curTransform) * 0.1\n    //     this.curTransform = this.transform\n    //     this.container.style.transform = `translate3d(0, -${\n    //         this.transform\n    //     }%, 0)`\n    // }\n\n  }]);\n\n  return Image;\n}(React.PureComponent);\n\nexport default Image;","map":{"version":3,"sources":["/Users/dion/Sites/destudio/components/Image.jsx"],"names":["React","delay","mergeClassNames","Image","image","props","url","alt","s","container","className","animateInView","state","inView","toggleInView","getContainerStyle","document","hasBlendMode","hasBlend","blendMode","noBlendHoverState","noHoverState","isActive","active","blendClassName","imageMask","src","loadedSrc","grayScale","parallax","hasParallax","el","style","backgroundImage","events","children","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport delay from 'delay'\n// import Observer from 'react-intersection-observer'\n\nimport {mergeClassNames,} from 'bia-template-helpers'\n// import {map, clamp,} from 'bia-math'\n// import {ratioPercentage, getResponsiveImage, supportsMixBlendMode,} from '_utils'\n\nclass Image extends React.PureComponent {\n    // state = {\n    //     src: this.props.src,\n    //     inView: false,\n    // }\n\n    // async componentDidMount() {\n    //     if (this.state.src) return\n\n    //     await delay(250)\n\n    //     if (!this.container) return\n    //     const bounds = this.container.getBoundingClientRect()\n\n    //     this.setState({\n    //         bounds,\n    //         top: bounds.top + window.pageYOffset,\n    //         bottom: bounds.bottom + window.pageYOffset,\n    //         actualHeight: bounds.height * this.initScale,\n    //         hasBlend: supportsMixBlendMode(),\n    //     })\n\n    //     this.props.rafScroll && this.props.rafScroll.add(this.rafLoop)\n    // }\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (!this.props.image || prevProps.image.url === this.props.image.url)\n    //         return\n\n    //     const newSrc = getResponsiveImage(this.props.image, this.state.bounds)\n\n    //     if (prevState.src && (!this.state.src || newSrc === this.state.src))\n    //         return\n\n    //     return this.setState({\n    //         src: newSrc,\n    //     })\n    // }\n\n    // componentWillUnmount() {\n    //     this.props.rafScroll && this.props.rafScroll.remove(this.rafLoop)\n    // }\n\n    // /**\n    //  * Event Handlers\n    //  */\n    // toggleInView = inView => {\n    //     if (this.state.src || inView == false || !this.props.image) return\n\n    //     const imageSrc = getResponsiveImage(this.props.image, this.state.bounds)\n\n    //     this.setState({\n    //         src: imageSrc,\n    //         inView: true,\n    //     })\n\n    //     if (this.props.callback) {\n    //         const image = document.createElement(`img`)\n    //         image.src = imageSrc\n    //         image.onload = e => {\n    //             this.props.callback()\n    //         }\n    //     }\n    // }\n    /**\n     * Renders\n     */\n\n    render() {\n        return <div></div>\n\n        const {image,} = this.props\n        const {url = ``, alt = ``,} = image ? image : {}\n\n        // thisthis.props.callback()\n\n        return (\n            <Observer\n                className={mergeClassNames(\n                    s.container,\n                    this.props.className,\n                    this.props.animateInView ? s.animateInView : false,\n                    this.state.inView //  && this.props.animateInView\n                        ? s.inView\n                        : false\n                )}\n                onChange={this.toggleInView}\n                threshold={0}\n                rootMargin=\"0% 0% 25%\"\n                triggerOnce={true}\n                style={this.getContainerStyle()}\n            >\n                {typeof document === `undefined` && (\n                    <noscript>\n                        <img src={url} alt={alt} />\n                    </noscript>\n                )}\n                {this.props.hasBlendMode && this.state.hasBlend ? (\n                    <div\n                        className={mergeClassNames(\n                            s.blendMode,\n                            this.props.noBlendHoverState\n                                ? s.noHoverState\n                                : false,\n                            this.props.isActive ? s.active : false,\n                            this.props.blendClassName\n                                ? this.props.blendClassName\n                                : false\n                        )}\n                    />\n                ) : (\n                    false\n                )}\n                <div className={s.imageMask}>\n                    <div\n                        className={mergeClassNames(\n                            !this.state.src ? s.src : s.loadedSrc,\n                            this.props.hasBlendMode && !this.props.isActive\n                                ? s.grayScale\n                                : false,\n                            this.props.parallax ? s.hasParallax : false\n                        )}\n                        ref={el => (this.container = el)}\n                        // onLoad={() => this.props.callback()}\n                        style={{\n                            ...this.props.style,\n                            backgroundImage: this.state.src\n                                ? `url(${this.state.src})`\n                                : ``,\n                        }}\n                        {...this.props.events}\n                    />\n                </div>\n\n                {this.props.children ? this.props.children : false}\n            </Observer>\n        )\n    }\n\n    // /**\n    //  * Helpers\n    //  */\n\n    // getContainerStyle = () => {\n    //     const {image, ratio = false, byPassRatio = false,} = this.props\n\n    //     if (!image || byPassRatio) return {}\n\n    //     const {width, height,} = image\n    //     const padding = ratio ? ratio : ratioPercentage({width, height,})\n    //     return {\n    //         paddingBottom: `${padding}%`,\n    //     }\n    // }\n\n    // rafLoop = args => {\n    //     const scrollY = args.scrollY + window.innerHeight\n    //     if (\n    //         !this.state.src ||\n    //         scrollY < this.state.top ||\n    //         args.scrollY >= this.state.bottom\n    //     )\n    //         return\n\n    //     const transformValue = clamp(\n    //         0,\n    //         10,\n    //         map(\n    //             [0, this.state.actualHeight + window.innerHeight,],\n    //             [0, 10,],\n    //             scrollY - this.state.top\n    //         )\n    //     )\n    //     if (transformValue > 10) return\n\n    //     this.transform += (transformValue - this.curTransform) * 0.1\n    //     this.curTransform = this.transform\n\n    //     this.container.style.transform = `translate3d(0, -${\n    //         this.transform\n    //     }%, 0)`\n    // }\n}\n\nexport default Image\n"]},"metadata":{},"sourceType":"module"}