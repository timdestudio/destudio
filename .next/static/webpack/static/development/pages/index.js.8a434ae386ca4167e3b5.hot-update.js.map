{"version":3,"file":"static/webpack/static/development/pages/index.js.8a434ae386ca4167e3b5.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/date/now.js","webpack:///./node_modules/core-js/library/fn/date/now.js","webpack:///./node_modules/core-js/library/modules/es6.date.now.js","webpack:///./utils/rafLoop.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/date/now\");","require('../../modules/es6.date.now');\nmodule.exports = require('../../modules/_core').Date.now;\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","/** Creates a rafLoop to handle scroll animations */\nexport class RafLoop {\n    /**\n     * Create the RafLoop\n     * @param  {} el - Element to check the Yoffset\n     */\n    constructor(el = window) {\n        this.scroll =\n            typeof el.pageYOffset === 'number' ? el.pageYOffset : el.scrollTop\n        this.lastScroll = 0\n        this.deltaY = 0\n\n        this.el = el\n        this.momentumY = 0\n        this.t = Date.now()\n        this.startTime = this.t\n\n        this.functionMap = new WeakMap()\n        this.functionsToRun = []\n\n        this.isPaused = false\n        this.ticking = false\n        this.isRunning = false\n\n        this.setup(el)\n    }\n\n    /**\n     * Set the eventlisteners\n     * @param  {} el - Element to check the Yoffset\n     */\n    setup(el) {\n        this.update = this.update.bind(this)\n\n        // Update value onscroll\n        el.addEventListener( 'scroll', e => {\n            if( e.currentTarget !== el ) return\n            this.scroll =\n                    typeof e.target.scrollTop === 'number'\n                        ? e.target.scrollTop\n                        : window.pageYOffset\n        }, true )\n    }\n\n    // --- Events ---\n\n    /**\n     * Remove a function from the loop\n     * @param  {function} fn\n     */\n    remove(fn) {\n        const func = this.functionMap.get(fn)\n        this.functionsToRun = this.functionsToRun.filter(\n            fn => !Object.is(fn, func)\n        )\n        this.functionMap.delete(fn)\n    }\n\n    /**\n     * Add a function to the loop\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n    add(fn, ...params) {\n        const func = e => fn(e, ...params)\n        this.functionMap.set(fn, func)\n        this.functionsToRun.push(func)\n\n        if (!this.isRunning) this.start()\n    }\n\n    /**\n     * Add a function to the loop to be run once\n     * @param  {function} fn - function to be added\n     * @param  {function} params - Parameters to be given when the functions runs\n     */\n    addOnce(fn, ...params) {\n        const func = e => {\n            fn(e, ...params)\n            this.remove(fn)\n        }\n        this.functionMap.set(fn, func)\n        this.functionsToRun.push(func)\n\n        if (!this.isRunning) this.start()\n    }\n\n    // --- Toggle the loop ---\n\n    /**\n     * Start the loop\n     */\n    start() {\n        this.isRunning = true\n        window.requestAnimationFrame(this.update)\n    }\n\n    /**\n     * Pause the loop\n     */\n    pause() {\n        this.isPaused = true\n    }\n\n    /**\n     * Resume the loop\n     */\n    resume() {\n        this.isPaused = false\n        this.t = Date.now()\n        this.startTime = this.t\n    }\n\n    /**\n     * Destroy the rafLoop\n     */\n    destroy() {\n        this.lastScroll = 0\n        this.deltaY = 0\n        this.momentumY = 0\n        this.functionsToRun = []\n    }\n\n    //  --- Helpers ---\n\n    /**\n     * Set all loop values to 0\n     */\n    reset() {\n        this.lastScroll = 0\n        this.deltaY = 0\n        this.momentumY = 0\n    }\n\n    /**\n     * Hard scroll to\n     */\n    snapTo(x = 0, y = 0) {\n        this.el.scrollTo(x, y)\n        this.momentumY = y\n    }\n\n    /**\n     * Get the current arguments for the loop\n     * @returns {object} args\n     */\n    getEvent() {\n        if (this.ticking) this.deltaY = this.scroll - this.lastScroll\n        const now = Date.now()\n        const deltaTime = now - this.t\n        const time = now - this.startTime\n\n        this.lastScroll = this.scroll\n        this.momentumY += (this.lastScroll - this.momentumY) * 0.15\n        this.t = now\n\n        return {\n            scrollY: this.lastScroll,\n            deltaY: this.deltaY,\n            momentumY: this.momentumY,\n            deltaTime,\n            time\n        }\n    }\n\n    // --- Loop ---\n\n    /**\n     * Default loop function\n     */\n    update() {\n        this.ticking = true\n\n        if (!this.isPaused) {\n            const args = this.getEvent()\n            for (let i = 0; i < this.functionsToRun.length; i++) {\n                this.functionsToRun[i](args)\n            }\n        }\n        this.ticking = false\n\n        if (this.functionsToRun.length === 0) this.isRunning = false\n        if (this.isRunning) window.requestAnimationFrame(this.update)\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAAA;AAAA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AA1BA;AAAA;AAAA;AA8BA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;;;;;AA7CA;AAAA;AAAA;AAkDA;AACA;AACA;AAAA;AAEA;AACA;AAEA;;;;;;AAzDA;AAAA;AAAA;AA8DA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;;;;;;AAtEA;AAAA;AAAA;AA2EA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAGA;;;;AAxFA;AAAA;AAAA;AA4FA;AACA;AACA;AAEA;;;;AAhGA;AAAA;AAAA;AAoGA;AACA;AAEA;;;;AAvGA;AAAA;AAAA;AA2GA;AACA;AACA;AACA;AAEA;;;;AAhHA;AAAA;AAAA;AAoHA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AA5HA;AAAA;AAAA;AAgIA;AACA;AACA;AACA;AAEA;;;;AArIA;AAAA;AAAA;AAwIA;AAAA;AACA;AACA;AACA;AAEA;;;;;AA7IA;AAAA;AAAA;AAkJA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAGA;;;;AAtKA;AAAA;AAAA;AA0KA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAtLA;AACA;AADA;AAAA;;;;A","sourceRoot":""}